#
# Note that all ${ENV_*} environment variables references must be explicitly built into
# the docker-entrypoint.sh script in the nginx-keycloak container image
#


server {
    listen 443 http2 ssl;
    root   /usr/share/nginx/html;

    resolver_timeout 5s;
    client_max_body_size 0;
    access_log  /dev/stdout main;

# CAs to trust for clients presenting their identify to nginx
    ssl_client_certificate /etc/ssl/certs/ca-certificates.crt;
# "on" for production to limit to CA bundle (typically CAC and MIT smartcards/certs)
# "off" for testing, "optional" to also allow username/password login
    ssl_verify_client    optional;
    ssl_verify_depth     2;

    ssl_certificate /etc/ssl/private/server-cert.pem;
    ssl_certificate_key /etc/ssl/private/server-key.pem;
    ssl_dhparam /etc/nginx/conf.d/dhparam.pem;

    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ecdh_curve secp521r1:secp384r1;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;

    ssl_session_cache shared:TLS:2m;
    ssl_buffer_size 4k;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # Set HSTS to 365 days
    add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload' always;    

    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;

    error_page 404 /404.html;
        location = /404.html {
    }

    error_page 500 502 503 504 /50x.html;
        location = /50x.html {
    }

    include mime.types;

    location / {
        return 301 /qrdm-ui/;
    }

    location = /qrdm-ui {
       return 301 /qrdm-ui/;
    }

    location /qrdm-ui/ {
        set $upstream "http://qrdm-ui:8501";
        proxy_pass $upstream;
        proxy_set_header        X-Real-IP          $remote_addr;
        proxy_set_header        X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto  $scheme;
        proxy_set_header        X-Scheme           $scheme;
        proxy_set_header        X-Forwarded-Host   $host;
        proxy_set_header        X-Forwarded-Server $host;
        proxy_set_header        Host               $host;
        proxy_http_version                         1.1;
        proxy_set_header        Upgrade            $http_upgrade;
        proxy_set_header        Connection         $connection_upgrade;
        proxy_cache_bypass                         $http_upgrade;
        proxy_buffering                            off;
        proxy_set_header        X-Forwarded-Port   $server_port;

    	proxy_set_header X-REMOTE-USER "$ssl_client_s_dn_cn - $ssl_client_s_dn_o";
    }

    location = /qrdm-api {
        return 301 /qrdm-api/;
    }

    location ~ /qrdm-api/(.*) {
        set $upstream "http://qrdm-api:8182/$1$is_args$args";
        proxy_pass $upstream;
        proxy_set_header        X-Real-IP          $remote_addr;
        proxy_set_header        X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto  $scheme;
        proxy_set_header        X-Scheme           $scheme;
        proxy_set_header        X-Forwarded-Host   $host;
        proxy_set_header        X-Forwarded-Server $host;
        proxy_set_header        Host               $host;
        proxy_http_version                         1.1;
        proxy_set_header        Upgrade            $http_upgrade;
        proxy_set_header        Connection         $connection_upgrade;
        proxy_cache_bypass                         $http_upgrade;
        proxy_buffering                            off;
        proxy_set_header        X-Forwarded-Port   $server_port;

    	proxy_set_header X-REMOTE-USER "$ssl_client_s_dn_cn - $ssl_client_s_dn_o";
    }


    
}
